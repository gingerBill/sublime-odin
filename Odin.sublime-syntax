%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Odin
file_extensions:
  - odin
first_line_match: "-[*]-( Mode:)? Odin -[*]-"
scope: source.odin
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'
  screaming_identifier: '\b[A-Z_](?![a-z])[A-Z_0-9]+\b'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: types
    - include: keywords
    - include: functions-and-declarations
    # - include: custom_styling
    - include: strings
    - include: string-escaped-char


  custom_styling:
    - match: \b({{screaming_identifier}})\b
      captures:
        1: storage.constant.odin

    - match: \b([A-Z][a-z0-9]+)([_A-Z][a-z0-9]*)*\b
      scope: storage.type.odin

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.block.odin
        - match: \*/
          scope: punctuation.definition.comment.odin
          pop: true
        - include: block-comment

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true
    - match: "#!"
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true

  keywords:
    - match: \b(import|export|foreign|package)\b
      scope: keyword.control.odin
    - match: \b(if|else|when|for|in|notin|defer|switch|return|const|do)\b
      scope: keyword.control.odin
    - match: \b(fallthrough|break|continue|case|vector|dynamic|static)\b
      scope: keyword.control.odin
    - match: \b(using|inline|no_inline)\b
      scope: keyword.control.odin
    - match: \b(asm|yield|await)\b
      scope: keyword.control.odin
    - match: \b(distinct|opaque)\b
      scope: keyword.operator.odin
    - match: \b(context)\b
      scope: keyword.operator.odin
    - match: \b(nil|true|false)\b
      scope: constant.language.odin
    - match: '\b(\d(\d|_)*(.\d(\d|_)*)?)((e|E)(\+|-)?\d+)?[ijk]?\b'
      scope: constant.numeric.odin
    - match: '\b((0b(0|1|_)+)|(0o(\d|_)+)|(0d(\d|_)+)|(0[xXh](\h|_)+))[i]?\b'
      scope: constant.numeric.odin
    - match: '---'
      scope: keyword.other.odin
    - match: \b(type|var|macro|struct|enum|union|map|set|bit_field|bit_set|typeid)\b
      scope: storage.type.odin
    - match: \b(cast|transmute|auto_cast)\b
      scope: keyword.function.odin
    - match: '@'
      scope: keyword.operator.odin
    - match: '([#@]\s*{{identifier}})'
      scope: keyword.tag.odin

  functions-and-declarations:
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*(proc)'
      captures:
        1: meta.function.odin entity.name.function.odin
        2: storage.type.odin
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*(inline|no_inline)\s+(proc)'
      captures:
        1: meta.function.odin entity.name.function.odin
        2: keyword.control.odin
        3: storage.type.odin
    - match: \b(size_of|align_of|offset_of|type_of|type_info_of|typeid_of)\b\s*\(
      captures:
        1: keyword.function.odin
    - match: (proc|macro)\s*[\(]
      captures:
        1: storage.type.odin
    - match: \b(len|cap|make|delete|new(_clone)?|free(_all)?|clear|reserve|resize|append(_string)?|copy|pop|(un)?ordered_remove)[\(]
      captures:
        "1": support.function.odin
    - match: \b(assertf?|panicf?|unimplemented|unreachable|card|incl|excl|default_hash(_string)?|source_code_location_hash|init_global_temporary_allocator)\s*[\(]
      captures:
        1: support.function.odin
    - match: ({{identifier}})\s*[!]?\s*[\(]
      captures:
        1: entity.function.odin
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*(struct|union|enum|bit_field|bit_set)'
      captures:
        1: meta.type.odin entity.name.type.odin
        2: storage.type.odin
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*([#]\s*type)'
      captures:
        1: meta.type.odin entity.name.type.odin
        2: keyword.tag.odin
    - match: '\b({{identifier}})\s*[:]\s*[:]\s*'
      captures:
        1: meta.constant.odin entity.name.type.odin

  types:
    - match: '\b(struct|enum|union|bit_field|bit_set)\b(?:(\{)(\}))?'
      captures:
        1: storage.type.odin
        2: meta.block.odin punctuation.definition.block.begin.odin
        3: meta.block.odin punctuation.definition.block.end.odin
    - match: (\[)(\d*)(\])(?=[[:alpha:]_])
      scope: meta.brackets.odin
      captures:
        1: punctuation.definition.brackets.begin.odin
        2: constant.numeric.odin
        3: punctuation.definition.brackets.end.odin
    - include: basic-types
    - match: '\$\s*({{identifier}})'
      scope: storage.type.odin

  basic-types:
    - match: '\b(i8|i16|i32|i64|i128|int)\b'
      scope: storage.type.odin
    - match: '\b(u8|u16|u32|u64|u128|uint|uintptr)\b'
      scope: storage.type.odin
    - match: '\b(f16|f32|f64)\b'
      scope: storage.type.odin
    - match: '\b(complex32|complex64|complex128)\b'
      scope: storage.type.odin
    - match: '\b(bool|b8|b16|b32|b64)\b'
      scope: storage.type.odin
    - match: '\b(string|cstring|rune)\b'
      scope: storage.type.odin
    - match: '\b(rawptr)\b'
      scope: storage.type.odin
    - match: '\b(any|typeid)\b'
      scope: storage.type.odin
    - match: '\b(byte)\b'
      scope: storage.type.odin

    - match: '\b(u16le|u32le|u64le|u128le|i16le|i32le|i64le|i128le)\b'
      scope: storage.type.odin
    - match: '\b(u16be|u32be|u64be|u128be|i16be|i32be|i64be|i128be)\b'
      scope: storage.type.odin

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.double.odin
        - match: '"'
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-escaped-char
    - match: "`"
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.raw.odin
        - match: "`"
          scope: punctuation.definition.string.end.odin
          pop: true
    - match: "'"
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.raw.odin
        - match: "'"
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-escaped-char

  string-escaped-char:
    - match: '\\(\\|[abefnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.odin
    - match: \\.
      scope: invalid.illegal.unknown-escape.odin
